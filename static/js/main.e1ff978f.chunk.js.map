{"version":3,"sources":["App.js","navbar.js","details.jsx","main.jsx","serviceWorker.js","index.js"],"names":["App","state","posts","getplayer","bdy","map","a","i","className","key","to","id","name","country","sport","unshift","axios","get","config","apiEndpoint","data","this","setState","prevProps","prevState","props","match","params","type","post","p","console","log","Component","NavBar","countMatches","Details","details","response","d","c","n","s","DOb","Info","MainPage","path","component","MatchTeam","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1ff978f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport config from \"./config.json\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nclass App extends Component {\n  state = { posts: [] };\n  async componentDidMount() {\n    const { data: posts } = await axios.get(config.apiEndpoint + \"/stars\");\n    this.setState({ posts });\n  }\n  async componentDidUpdate(prevProps,prevState) {\n    if(prevState.posts===this.state.posts){\n      let sport = this.props.match.params.type\n      ? \"/\"+this.props.match.params.type\n      : \"\";\n    const { data: posts } = await axios.get(config.apiEndpoint + \"/stars\"+sport);\n    this.setState({ posts });\n    }\n  }\n  getplayer = () => {\n    let p = [...this.state.posts];\n    \n    let bdy = p.map((a, i) => (\n      <div className=\"row\" key={i}>\n        <div className=\"col-6 border\">\n          <Link to={\"/details/\" + a.id}>{a.name}</Link>\n        </div>\n        <div className=\"col-3 border\">{a.country}</div>\n        <div className=\"col-3 border\">{a.sport}</div>\n      </div>\n    ));\n    bdy.unshift(\n      <div className=\"row bg-primary text-light\" key={-1}>\n        <div className=\"col-6 border\">Name</div>\n        <div className=\"col-3 border\">Country</div>\n        <div className=\"col-3 border\">Sport</div>\n      </div>\n    );\n    return bdy;\n  };\n  render() {\n    let post = [...this.state.posts];\n\n    let p = this.getplayer();\n\n    console.log(post);\n    return <div className=\"container px-4 my-2\">{p}</div>;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst NavBar = ({ countMatches }) => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n      <Link className=\"navbar-brand\" to=\"/stars\">\n        Sports Stars\n      </Link>\n      <div className=\"\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/stars\">\n              All\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/stars/Cricket\">\n              Cricket\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/stars/Football\">\n              Football\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport config from \"./config.json\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\nclass Details extends Component {\n  state = { country: \"\", name: \"\", id: \"\", sport: \"\", details: \"\" };\n\n  async componentDidMount() {\n    let id = this.props.match.params.id;\n    const response = await axios.get(config.apiEndpoint + \"/details/\" + id);\n    //this.setState({ posts:data });\n    let d = { ...response.data };\n    this.setState({\n      country: d.country,\n      name: d.name,\n      id: d.id,\n      sport: d.sport,\n      details: d.details,\n    });\n    console.log(response.data, d);\n    // return d;\n    //this.setState({ posts:d});\n  }\n\n  render() {\n    let c = this.state.country;\n    let n = this.state.name;\n    let s = this.state.sport;\n    let d = this.state.details;\n\n    return (\n      <div className=\"container\">\n        <h2>{n}</h2>\n        <h4>Date of Birth :{d.DOb}</h4>\n        <h4>Sport :{s}</h4>\n        <h4>Country :{c}</h4>\n        <p>{d.Info}</p>\n        <Link to={'/stars'+s}>{s} Stars</Link>\n      </div>\n    );\n  }\n}\n\nexport default Details;\n","import React, { Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport MatchTeam from \"./App\";\nimport NavBar from \"./navbar\";\nimport Details from \"./details\";\nclass MainPage extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"container\">\n        <NavBar />\n        <div>\n          <Switch>\n            <Route path=\"/stars/:type\" component={MatchTeam} />\n            <Route path=\"/stars\" component={MatchTeam} />\n            <Route path=\"/details/:id\" component={Details} />\n            <Redirect to=\"/stars\" />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from \"react-router-dom\";\n//import MainPage from './component1/main'\n//import App from './set1/App'\nimport MainPage from './main';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <MainPage />\n    {/* <App /> */}\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}